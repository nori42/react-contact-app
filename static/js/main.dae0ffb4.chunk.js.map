{"version":3,"sources":["Contact.js","ContactList.js","AddContact.js","SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Contact","name","number","email","facebook","ID","useState","showContactDetail","setShowContactDetail","toggleContactDetail","className","onClick","ContactList","contacts","map","contact","AddContact","onAddContact","showAddContactForm","setName","numberString","setNumberString","setEmail","setFacebook","errorMessage","setErrorMessage","type","value","placeholder","onChange","e","target","preventDefault","Math","floor","random","isNaN","parseInt","SearchBar","onUsedSearch","App","setContacts","setshowAddContactForm","searchIsUsed","setSearchIsUsed","searchInput","setSearchInput","toggleAddContactForm","input","filter","toLowerCase","includes","contactDetail","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae0ffb4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Contact = ({name, number, email, facebook, ID}) => {\r\n  const [showContactDetail, setShowContactDetail] = useState(false)\r\n    \r\n  const toggleContactDetail = () => {\r\n    setShowContactDetail(!showContactDetail)\r\n  }\r\n\r\n  return (\r\n     <div className =\"contact\">\r\n        <h2 className=\"name\">{name}</h2>\r\n        {!showContactDetail && <button className=\"btn-show-contact\" onClick={toggleContactDetail}>...</button>}\r\n\r\n        {showContactDetail &&\r\n          <div className=\"contact-details\">\r\n              <p><span className=\"contact-label\">Number</span>: {number}</p>\r\n              <p><span className=\"contact-label\">Email:</span> {email}</p>\r\n              <p><span className=\"contact-label\">Facebook:</span> {facebook}</p>\r\n              <button className=\"btn-show-contact\" onClick={toggleContactDetail}>...</button>\r\n          </div>  \r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n  email: PropTypes.string,\r\n  facebook: PropTypes.string,\r\n  ID: PropTypes.number\r\n}\r\n\r\nexport default Contact;","import Contact from \"./Contact\";\r\n\r\nconst ContactList = ({contacts}) => {\r\n\r\n    return (  \r\n        contacts.map((contact) => (\r\n            <Contact name={contact.name} number={contact.number} email={contact.email} facebook={contact.facebook} key={contact.ID}/>\r\n        ))\r\n    );\r\n}\r\n \r\nexport default ContactList;","import { useState } from \"react\";\r\n\r\nconst AddContact = ({ onAddContact, showAddContactForm}) => {\r\n    const [name, setName] = useState('')\r\n    const [numberString, setNumberString] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [facebook, setFacebook] = useState('')\r\n    const [errorMessage,setErrorMessage] = useState('')\r\n\r\n    const createContact = (e) => {\r\n        e.preventDefault();\r\n\r\n        const ID = Math.floor(Math.random()*9999)\r\n\r\n        if(name ==='' || numberString ==='')\r\n        {\r\n            setErrorMessage(\"Please Fill In All The Input!\")\r\n            return\r\n        }\r\n\r\n        if(isNaN(numberString)) {\r\n            setErrorMessage (\"Number Input Must Be Proper!\")\r\n            return\r\n        }\r\n\r\n        const number = parseInt(numberString);\r\n\r\n        const contactDetail = {name,number,email,facebook, ID}\r\n        onAddContact(contactDetail)\r\n\r\n        setName('')\r\n        setNumberString('')\r\n        setEmail('')\r\n        setFacebook('')\r\n\r\n        showAddContactForm();\r\n    }\r\n\r\n    return (  \r\n        <form className=\"contact-form\">\r\n            <label>Name:</label>\r\n            <input type=\"text\" value={name} placeholder=\"Name\" onChange={(e) => setName(e.target.value)}/>\r\n            <label>Number:</label>\r\n            <input type=\"text\" value={numberString} placeholder=\"Number\" onChange={(e) => setNumberString(e.target.value)}/>\r\n            <label>Email:</label>\r\n            <input type=\"text\" value={email} placeholder=\"Email\" onChange={(e) => setEmail(e.target.value)}/>\r\n            <label>Facebook:</label>\r\n            <input type=\"text\" value={facebook} placeholder=\"Facebook\" onChange={(e) => setFacebook(e.target.value)}/>\r\n            <p className=\"form-error-message\">{errorMessage}</p>\r\n            <button className=\"btn-save-contact\" onClick={createContact}>Save</button>\r\n        </form>\r\n    );\r\n}\r\n \r\n\r\n\r\nexport default AddContact;","const SearchBar = ({onUsedSearch}) => {\r\n\r\n    return (  \r\n        <input type=\"text\" placeholder=\"Search\" onChange={(e) => onUsedSearch(e.target.value) }/>\r\n    );\r\n}\r\n \r\nexport default SearchBar","import React, { useState } from 'react';\r\nimport ContactList from './ContactList';\r\nimport AddContact from './AddContact';\r\nimport SearchBar from './SearchBar';\r\n\r\n\r\nfunction App() {\r\n  const [contacts,setContacts] = useState([])\r\n  const [showAddContactForm,setshowAddContactForm] = useState(false)\r\n  const [searchIsUsed, setSearchIsUsed] = useState(false)\r\n  const [searchInput, setSearchInput] = useState()\r\n\r\n  const toggleAddContactForm = () => setshowAddContactForm(!showAddContactForm)\r\n\r\n  const onUsedSearch = (input) => {\r\n    \r\n    if(input !== '')\r\n    {\r\n      setSearchIsUsed(true)\r\n      setSearchInput(input)\r\n    } else\r\n    {\r\n      setSearchIsUsed(false)\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const onAddContact = (contactDetail) => {\r\n\r\n    setContacts([...contacts,contactDetail])\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"header\">Contact</h1>\r\n\r\n      <SearchBar onUsedSearch={onUsedSearch}/>\r\n\r\n      <div className=\"contact-list\">\r\n          {!searchIsUsed && <ContactList contacts={contacts}/>}\r\n          {searchIsUsed && <ContactList contacts={contacts.filter((contact) => contact.name.toLowerCase().includes(searchInput.toLowerCase()))}/>}\r\n      </div>\r\n\r\n      {showAddContactForm && <AddContact onAddContact={onAddContact} showAddContactForm={toggleAddContactForm}/>}\r\n      \r\n\r\n      <button className=\"btn-add-contact\" onClick={toggleAddContactForm}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}